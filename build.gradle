plugins {
    id "java"
    id "idea"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "net.minecraftforge.gradle.forge"
    id "org.spongepowered.mixin"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
    maven { url = "https://jitpack.io/" }
}

version = "1.0.0"
group = "me.liuli.proxymod"
archivesBaseName = "ProxyMod"

sourceCompatibility = targetCompatibility = 1.8
compileJava.options.encoding = "UTF-8"

minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = false
    clientJvmArgs += ["-Dfml.coreMods.load=me.liuli.proxymod.inject.InjectionLoader", "-Dmixin.debug.verbose=true", "-Dmixin.debug.export=true", "-Dmixin.dumpTargetOnFailure=true", "-Xmx1024m -Xms1024m"]
}

configurations {
    include
    implementation.extendsFrom(include)
}

dependencies {
    include("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        transitive = false
        exclude module: "guava"
        exclude module: "commons-io"
        exclude module: "gson"
        exclude module: "launchwrapper"
        exclude module: "log4j-core"
    }

    annotationProcessor("org.spongepowered:mixin:0.7.11-SNAPSHOT")

    include fileTree(include: ["*.jar"], dir: "libs")
}

shadowJar {
    archiveClassifier.set("")
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    // Ultralight native files are going to be downloaded from our cloud
    exclude "native-binaries/**"

    exclude "LICENSE.txt"

    exclude "com/sun/jna/**"

    exclude "META-INF/maven/**"
    exclude "META-INF/versions/**"
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    filesMatching("mcmod.info") {
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    rename "(.+_at.cfg)", "META-INF/\$1"
}

task moveResources {
    doLast {
        ant.move file: "${buildDir}/resources/main",
                todir: "${buildDir}/classes/java"
    }
}

moveResources.dependsOn(processResources)
classes.dependsOn(moveResources)

jar {
    manifest.attributes(
            "FMLCorePlugin": "me.liuli.proxymod.inject.InjectionLoader",
            "FMLCorePluginContainsFMLMod": true,
            "ForceLoadAsMod": true,
            "MixinConfigs": "mixins.proxymod.json",
            "ModSide": "CLIENT",
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "TweakOrder": "0",
    )

    enabled = false
}

mixin {
    disableRefMapWarning = true
    defaultObfuscationEnv searge
    add sourceSets.main, "mixins.proxymod.refmap.json"
}

reobf {
    shadowJar {
        mappingType = "SEARGE"
    }
}

tasks.reobfJar.dependsOn(shadowJar)
